services:
  - type: web
    name: vacuum-pump-maintenance
    runtime: python
    buildCommand: |
      pip install -r requirements.txt
      chmod +x render_build.sh
      ./render_build.sh
    startCommand: gunicorn app:app --log-level debug --timeout 120
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.0
      - key: FLASK_ENV
        value: production
      - key: RENDER
        value: "true"
      - key: DATABASE_URL
        fromDatabase:
          name: vacuum-pump-db
          property: connectionString
      - key: SQLALCHEMY_ECHO
        value: "true"
      # Authentication environment variables
      - key: SECRET_KEY
        generateValue: true
      - key: GOOGLE_CLIENT_ID
        sync: false
      - key: GOOGLE_CLIENT_SECRET
        sync: false
      - key: ALLOWED_EMAIL_DOMAINS
        sync: false
      - key: ADMIN_EMAILS
        sync: false
    # Add a health check to ensure the app is running correctly
    healthCheckPath: /
    # Only check database status on deploy, don't initialize automatically
    initialDeployHook: |
      echo "Checking database status..."
      python -c "from app import db, Equipment;
      try:
          count = Equipment.query.count()
          print(f'Database already contains {count} equipment items. No initialization needed.')
      except Exception as e:
          print(f'Error checking database: {e}')
          print('You may need to manually initialize the database by visiting /init-db endpoint.')
      "

# A PostgreSQL database
databases:
  - name: vacuum-pump-db
    databaseName: vacuum_pump_maintenance
    user: vacuum_pump_user
    plan: free
    # Add ipAllowList to allow connections from the web service
    ipAllowList: []
    # Ensure the database is created before the web service starts
    postProvisionCommands:
      - echo "Database provisioned successfully"
